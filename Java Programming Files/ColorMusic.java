package Finalproject;

/**************
** WARNING - this code automatically generated by Syntona.
** The real source is probably a Syntona patch.
** Do NOT edit this file unless you copy it to another directory and change the name.
** Otherwise it is likely to get clobbered the next time you
** export Java source code from Syntona.
**
** Syntona is available from: http://www.softsynth.com/syntona/
*/

import com.jsyn.unitgen.PulseOscillator;
import com.jsyn.ports.UnitOutputPort;
import com.jsyn.unitgen.UnitVoice;
import com.jsyn.unitgen.VariableRateMonoReader;
import com.jsyn.ports.UnitInputPort;
import com.jsyn.unitgen.SineOscillatorPhaseModulated;
import com.jsyn.unitgen.SineOscillator;
import com.softsynth.shared.time.TimeStamp;
import com.jsyn.unitgen.PassThrough;
import com.jsyn.data.SegmentedEnvelope;
import com.jsyn.unitgen.FilterBandPass;
import com.jsyn.unitgen.Circuit;

public class ColorMusic extends Circuit implements UnitVoice {
    // Declare units and ports.
    PassThrough mAmplitudePassThrough;
    public UnitInputPort Amplitude;
    PassThrough mOutputPassThrough;
    public UnitOutputPort output;
    PassThrough mFilterFreqPassThrough;
    public UnitInputPort FilterFreq;
    PassThrough mFreqOsc2PassThrough;
    public UnitInputPort FreqOsc2;
    PassThrough mModulationPassThrough;
    public UnitInputPort Modulation;
    PassThrough mLoopRatePassThrough;
    public UnitInputPort LoopRate;
    SineOscillatorPhaseModulated mSineOscPM;
    FilterBandPass mBandPass;
    SineOscillator mSineOsc;
    PulseOscillator mPulseOsc;
    VariableRateMonoReader mMonoRdr;
    SegmentedEnvelope mSegEnv;
    PassThrough mFrequencyPassThrough;
    public UnitInputPort frequency;

    // Declare inner classes for any child circuits.

    public ColorMusic() {
        // Create unit generators.
        add(mAmplitudePassThrough = new PassThrough());
        addPort(Amplitude = mAmplitudePassThrough.input, "Amplitude");
        add(mOutputPassThrough = new PassThrough());
        addPort(output = mOutputPassThrough.output, "output");
        add(mFilterFreqPassThrough = new PassThrough());
        addPort(FilterFreq = mFilterFreqPassThrough.input, "FilterFreq");
        add(mFreqOsc2PassThrough = new PassThrough());
        addPort(FreqOsc2 = mFreqOsc2PassThrough.input, "FreqOsc2");
        add(mModulationPassThrough = new PassThrough());
        addPort(Modulation = mModulationPassThrough.input, "Modulation");
        add(mLoopRatePassThrough = new PassThrough());
        addPort(LoopRate = mLoopRatePassThrough.input, "LoopRate");
        add(mSineOscPM = new SineOscillatorPhaseModulated());
        add(mBandPass = new FilterBandPass());
        add(mSineOsc = new SineOscillator());
        add(mPulseOsc = new PulseOscillator());
        add(mMonoRdr = new VariableRateMonoReader());
        double[] mSegEnvData = {
            0.5, 1.0,
            0.5, 0.2,
            0.5, 0.8,
            0.5, 0.0,
        };
        mSegEnv = new SegmentedEnvelope( mSegEnvData );
        mSegEnv.setSustainBegin( 1 );
        mSegEnv.setSustainEnd( 3 );
        add(mFrequencyPassThrough = new PassThrough());
        addPort(frequency = mFrequencyPassThrough.input, "frequency");
        // Connect units and ports.
        mAmplitudePassThrough.output.connect(mSineOscPM.amplitude);
        mFilterFreqPassThrough.output.connect(mBandPass.frequency);
        mFreqOsc2PassThrough.output.connect(mPulseOsc.frequency);
        mModulationPassThrough.output.connect(mSineOsc.amplitude);
        mLoopRatePassThrough.output.connect(mMonoRdr.rate);
        mSineOscPM.output.connect(mBandPass.input);
        mBandPass.output.connect(mMonoRdr.amplitude);
        mSineOsc.output.connect(mSineOscPM.modulation);
        mPulseOsc.output.connect(mBandPass.amplitude);
        mMonoRdr.output.connect(mOutputPassThrough.input);
        mFrequencyPassThrough.output.connect(mSineOscPM.frequency);
        // Setup
        Amplitude.setup(0.1, 0.5, 1.0);
        FilterFreq.setup(0.0, 3079.6, 6159.2);
        FreqOsc2.setup(0.0, 385.399902, 770.799804);
        Modulation.setup(0.0, 0.8354916, 1.0);
        LoopRate.setup(0.1, 10.110959669999998, 20.221919339999996);
        mBandPass.Q.set(1.0);
        mSineOsc.frequency.set(184.7896359408577);
        mPulseOsc.amplitude.set(1.0);
        mPulseOsc.width.set(0.0);
        frequency.setup(0.0, 659.2551138257398, 1318.5102276514797);
    }

    public void noteOn(double frequency, double amplitude, TimeStamp timeStamp) {
        this.Amplitude.set(amplitude, timeStamp);
        mMonoRdr.dataQueue.queueOn( mSegEnv, timeStamp);
        this.frequency.set(frequency, timeStamp);
    }

    public void noteOff(TimeStamp timeStamp) {
        mMonoRdr.dataQueue.queueOff( mSegEnv, false, timeStamp);
    }
    
    public UnitOutputPort getOutput() {
        return output;
    }
}
